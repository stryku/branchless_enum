$$ -*- mode: c++; -*-
$$ This is a Pump source file.  Please use Pump to convert it to
$$ branchless_macros.hpp
$$
$var n = 20  $$ The maximum arity we support.
$$}} This meta comment fixes auto-indentation in editors.

#include "branchless_helpers.hpp"
#include "branchless_variant.hpp"

#include <boost/variant.hpp>

$range i 1..n

$for i [[

$range j 1..i

#define branchless_enum_$i(name, start_value, operators $for j [[, n$j]] )                                      \
struct name_types \
{ \
    struct Types \
    { \
        $for j[[struct n$j; ]] \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T $for j[[, n$j]]>;                                      \
        constexpr static int start = start_value;                                      \
        $for j[[
            struct n$j                                      \
            {                                      \
                constexpr static int value = start + $j - 1; \
                constexpr static auto toString() { return #n$j; } \
                constexpr bool operator==(const n$j&) const { return true; } \
                template <typename T, typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; }\
            }; \
        ]] \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
        $for j[[
            using n$j = name_types::Types::n$j; \
        ]] \
    };                                      \
    $for j[[
        constexpr static Types::n$j n$j{}; \
    ]] \
    using Type = branchless::variant<$for j , [[name_types::Types::n$j]]>; \
    constexpr static const auto nameArray = make_array<$for j , [[name_types::Types::n$j]]>(); \
\
    template <typename T, \
              typename = std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
        $for j[[
            if (str == name_types::Types::n$j::toString()) return n$j; \
        ]]
            \
        return{};\
    }\
};
]]
