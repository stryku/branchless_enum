// This file was GENERATED by command:
//     pump.py branchless_macros.hpp.pump
// DO NOT EDIT BY HAND!!!


#include "branchless_helpers.hpp"
#include "branchless_variant.hpp"

#include <boost/variant.hpp>

#define branchless_enum_1(name, start_value, operators , \
    n1 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
     \
    using Type = branchless::variant<name_types::Types::n1>; \
    constexpr static const auto nameArray = \
        make_array<name_types::Types::n1>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    \
        return{};\
    }\
};
#define branchless_enum_2(name, start_value, operators , n1, \
    n2 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    \
        return{};\
    }\
};
#define branchless_enum_3(name, start_value, operators , n1, n2, \
    n3 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    \
        return{};\
    }\
};
#define branchless_enum_4(name, start_value, operators , n1, n2, n3, \
    n4 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4>; \
        \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, \
        name_types::Types::n4>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    \
        return{};\
    }\
};
#define branchless_enum_5(name, start_value, operators , n1, n2, n3, n4, \
    n5 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    \
        return{};\
    }\
};
#define branchless_enum_6(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    \
        return{};\
    }\
};
#define branchless_enum_7(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7>; \
        \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, \
        name_types::Types::n7>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    \
        return{};\
    }\
};
#define branchless_enum_8(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    \
        return{};\
    }\
};
#define branchless_enum_9(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    \
        return{};\
    }\
};
#define branchless_enum_10(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, \
        name_types::Types::n10>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, \
        name_types::Types::n10>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    \
        return{};\
    }\
};
#define branchless_enum_11(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    \
        return{};\
    }\
};
#define branchless_enum_12(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    \
        return{};\
    }\
};
#define branchless_enum_13(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, \
    n13 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    \
        return{};\
    }\
};
#define branchless_enum_14(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, \
    n14 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    \
        return{};\
    }\
};
#define branchless_enum_15(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, \
    n15 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    \
        return{};\
    }\
};
#define branchless_enum_16(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, \
    n16 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15; struct n16;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n16                                      \
            {                                      \
                constexpr static int value = start + 16 - 1; \
                constexpr static auto toString() { return #n16; } \
                constexpr bool operator==(const n16&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
                    using n16 = name_types::Types::n16; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
            constexpr static Types::n16 n16{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    if (str == name_types::Types::n16::toString()) return n16; \
                    \
        return{};\
    }\
};
#define branchless_enum_17(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, \
    n17 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15; struct n16; \
            struct n17;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17>; \
            \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n16                                      \
            {                                      \
                constexpr static int value = start + 16 - 1; \
                constexpr static auto toString() { return #n16; } \
                constexpr bool operator==(const n16&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n17                                      \
            {                                      \
                constexpr static int value = start + 17 - 1; \
                constexpr static auto toString() { return #n17; } \
                constexpr bool operator==(const n17&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
                    using n16 = name_types::Types::n16; \
                    using n17 = name_types::Types::n17; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
            constexpr static Types::n16 n16{}; \
            constexpr static Types::n17 n17{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    if (str == name_types::Types::n16::toString()) return n16; \
                    if (str == name_types::Types::n17::toString()) return n17; \
                    \
        return{};\
    }\
};
#define branchless_enum_18(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, \
    n18 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15; struct n16; \
            struct n17; struct n18;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, \
            n18>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n16                                      \
            {                                      \
                constexpr static int value = start + 16 - 1; \
                constexpr static auto toString() { return #n16; } \
                constexpr bool operator==(const n16&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n17                                      \
            {                                      \
                constexpr static int value = start + 17 - 1; \
                constexpr static auto toString() { return #n17; } \
                constexpr bool operator==(const n17&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n18                                      \
            {                                      \
                constexpr static int value = start + 18 - 1; \
                constexpr static auto toString() { return #n18; } \
                constexpr bool operator==(const n18&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
                    using n16 = name_types::Types::n16; \
                    using n17 = name_types::Types::n17; \
                    using n18 = name_types::Types::n18; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
            constexpr static Types::n16 n16{}; \
            constexpr static Types::n17 n17{}; \
            constexpr static Types::n18 n18{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    if (str == name_types::Types::n16::toString()) return n16; \
                    if (str == name_types::Types::n17::toString()) return n17; \
                    if (str == name_types::Types::n18::toString()) return n18; \
                    \
        return{};\
    }\
};
#define branchless_enum_19(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, \
    n19 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15; struct n16; \
            struct n17; struct n18; struct n19;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, \
            n18, n19>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n16                                      \
            {                                      \
                constexpr static int value = start + 16 - 1; \
                constexpr static auto toString() { return #n16; } \
                constexpr bool operator==(const n16&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n17                                      \
            {                                      \
                constexpr static int value = start + 17 - 1; \
                constexpr static auto toString() { return #n17; } \
                constexpr bool operator==(const n17&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n18                                      \
            {                                      \
                constexpr static int value = start + 18 - 1; \
                constexpr static auto toString() { return #n18; } \
                constexpr bool operator==(const n18&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n19                                      \
            {                                      \
                constexpr static int value = start + 19 - 1; \
                constexpr static auto toString() { return #n19; } \
                constexpr bool operator==(const n19&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
                    using n16 = name_types::Types::n16; \
                    using n17 = name_types::Types::n17; \
                    using n18 = name_types::Types::n18; \
                    using n19 = name_types::Types::n19; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
            constexpr static Types::n16 n16{}; \
            constexpr static Types::n17 n17{}; \
            constexpr static Types::n18 n18{}; \
            constexpr static Types::n19 n19{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18, \
        name_types::Types::n19>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18, \
        name_types::Types::n19>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    if (str == name_types::Types::n16::toString()) return n16; \
                    if (str == name_types::Types::n17::toString()) return n17; \
                    if (str == name_types::Types::n18::toString()) return n18; \
                    if (str == name_types::Types::n19::toString()) return n19; \
                    \
        return{};\
    }\
};
#define branchless_enum_20(name, start_value, operators , n1, n2, n3, n4, n5, \
    n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, n18, n19, \
    n20 )                                      \
struct name_types \
{ \
    struct Types \
    { \
        struct n1; struct n2; struct n3; struct n4; struct n5; struct n6; \
            struct n7; struct n8; struct n9; struct n10; struct n11; \
            struct n12; struct n13; struct n14; struct n15; struct n16; \
            struct n17; struct n18; struct n19; struct n20;  \
        template <typename T>                                      \
        constexpr static bool is_this_type_v = is_any_of_v<T , n1, n2, n3, \
            n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16, n17, \
            n18, n19, n20>;                                      \
        constexpr static int start = start_value; \
            \
                    struct n1                                      \
            {                                      \
                constexpr static int value = start + 1 - 1; \
                constexpr static auto toString() { return #n1; } \
                constexpr bool operator==(const n1&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n2                                      \
            {                                      \
                constexpr static int value = start + 2 - 1; \
                constexpr static auto toString() { return #n2; } \
                constexpr bool operator==(const n2&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n3                                      \
            {                                      \
                constexpr static int value = start + 3 - 1; \
                constexpr static auto toString() { return #n3; } \
                constexpr bool operator==(const n3&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n4                                      \
            {                                      \
                constexpr static int value = start + 4 - 1; \
                constexpr static auto toString() { return #n4; } \
                constexpr bool operator==(const n4&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n5                                      \
            {                                      \
                constexpr static int value = start + 5 - 1; \
                constexpr static auto toString() { return #n5; } \
                constexpr bool operator==(const n5&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n6                                      \
            {                                      \
                constexpr static int value = start + 6 - 1; \
                constexpr static auto toString() { return #n6; } \
                constexpr bool operator==(const n6&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n7                                      \
            {                                      \
                constexpr static int value = start + 7 - 1; \
                constexpr static auto toString() { return #n7; } \
                constexpr bool operator==(const n7&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n8                                      \
            {                                      \
                constexpr static int value = start + 8 - 1; \
                constexpr static auto toString() { return #n8; } \
                constexpr bool operator==(const n8&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n9                                      \
            {                                      \
                constexpr static int value = start + 9 - 1; \
                constexpr static auto toString() { return #n9; } \
                constexpr bool operator==(const n9&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n10                                      \
            {                                      \
                constexpr static int value = start + 10 - 1; \
                constexpr static auto toString() { return #n10; } \
                constexpr bool operator==(const n10&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n11                                      \
            {                                      \
                constexpr static int value = start + 11 - 1; \
                constexpr static auto toString() { return #n11; } \
                constexpr bool operator==(const n11&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n12                                      \
            {                                      \
                constexpr static int value = start + 12 - 1; \
                constexpr static auto toString() { return #n12; } \
                constexpr bool operator==(const n12&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n13                                      \
            {                                      \
                constexpr static int value = start + 13 - 1; \
                constexpr static auto toString() { return #n13; } \
                constexpr bool operator==(const n13&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n14                                      \
            {                                      \
                constexpr static int value = start + 14 - 1; \
                constexpr static auto toString() { return #n14; } \
                constexpr bool operator==(const n14&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n15                                      \
            {                                      \
                constexpr static int value = start + 15 - 1; \
                constexpr static auto toString() { return #n15; } \
                constexpr bool operator==(const n15&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n16                                      \
            {                                      \
                constexpr static int value = start + 16 - 1; \
                constexpr static auto toString() { return #n16; } \
                constexpr bool operator==(const n16&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n17                                      \
            {                                      \
                constexpr static int value = start + 17 - 1; \
                constexpr static auto toString() { return #n17; } \
                constexpr bool operator==(const n17&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n18                                      \
            {                                      \
                constexpr static int value = start + 18 - 1; \
                constexpr static auto toString() { return #n18; } \
                constexpr bool operator==(const n18&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n19                                      \
            {                                      \
                constexpr static int value = start + 19 - 1; \
                constexpr static auto toString() { return #n19; } \
                constexpr bool operator==(const n19&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
                    struct n20                                      \
            {                                      \
                constexpr static int value = start + 20 - 1; \
                constexpr static auto toString() { return #n20; } \
                constexpr bool operator==(const n20&) const { return true; } \
                template <typename T, \
                    typename = std::enable_if_t<is_this_type_v<T>>> constexpr bool operator==(const T&) const { return false; \
                    }\
            }; \
         \
    }; \
}; \
\
struct name \
{ \
    struct Types                                      \
    {                                      \
                    using n1 = name_types::Types::n1; \
                    using n2 = name_types::Types::n2; \
                    using n3 = name_types::Types::n3; \
                    using n4 = name_types::Types::n4; \
                    using n5 = name_types::Types::n5; \
                    using n6 = name_types::Types::n6; \
                    using n7 = name_types::Types::n7; \
                    using n8 = name_types::Types::n8; \
                    using n9 = name_types::Types::n9; \
                    using n10 = name_types::Types::n10; \
                    using n11 = name_types::Types::n11; \
                    using n12 = name_types::Types::n12; \
                    using n13 = name_types::Types::n13; \
                    using n14 = name_types::Types::n14; \
                    using n15 = name_types::Types::n15; \
                    using n16 = name_types::Types::n16; \
                    using n17 = name_types::Types::n17; \
                    using n18 = name_types::Types::n18; \
                    using n19 = name_types::Types::n19; \
                    using n20 = name_types::Types::n20; \
         \
    };                                      \
            constexpr static Types::n1 n1{}; \
            constexpr static Types::n2 n2{}; \
            constexpr static Types::n3 n3{}; \
            constexpr static Types::n4 n4{}; \
            constexpr static Types::n5 n5{}; \
            constexpr static Types::n6 n6{}; \
            constexpr static Types::n7 n7{}; \
            constexpr static Types::n8 n8{}; \
            constexpr static Types::n9 n9{}; \
            constexpr static Types::n10 n10{}; \
            constexpr static Types::n11 n11{}; \
            constexpr static Types::n12 n12{}; \
            constexpr static Types::n13 n13{}; \
            constexpr static Types::n14 n14{}; \
            constexpr static Types::n15 n15{}; \
            constexpr static Types::n16 n16{}; \
            constexpr static Types::n17 n17{}; \
            constexpr static Types::n18 n18{}; \
            constexpr static Types::n19 n19{}; \
            constexpr static Types::n20 n20{}; \
     \
    using Type = branchless::variant<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18, \
        name_types::Types::n19, name_types::Types::n20>; \
    constexpr static const auto nameArray = make_array<name_types::Types::n1, \
        name_types::Types::n2, name_types::Types::n3, name_types::Types::n4, \
        name_types::Types::n5, name_types::Types::n6, name_types::Types::n7, \
        name_types::Types::n8, name_types::Types::n9, name_types::Types::n10, \
        name_types::Types::n11, name_types::Types::n12, \
        name_types::Types::n13, name_types::Types::n14, \
        name_types::Types::n15, name_types::Types::n16, \
        name_types::Types::n17, name_types::Types::n18, \
        name_types::Types::n19, name_types::Types::n20>(); \
\
    template <typename T, \
              typename = \
                  std::enable_if_t<be_namespace::Types::is_this_type_v<T>>> \
    static constexpr auto toString(const T&) \
    { \
        return T::toString(); \
    } \
    static auto toString(const Type& t) \
    { \
        return nameArray[t.value]; \
    } \
    static Type fromString(const std::string& str) \
    { \
                    if (str == name_types::Types::n1::toString()) return n1; \
                    if (str == name_types::Types::n2::toString()) return n2; \
                    if (str == name_types::Types::n3::toString()) return n3; \
                    if (str == name_types::Types::n4::toString()) return n4; \
                    if (str == name_types::Types::n5::toString()) return n5; \
                    if (str == name_types::Types::n6::toString()) return n6; \
                    if (str == name_types::Types::n7::toString()) return n7; \
                    if (str == name_types::Types::n8::toString()) return n8; \
                    if (str == name_types::Types::n9::toString()) return n9; \
                    if (str == name_types::Types::n10::toString()) return n10; \
                    if (str == name_types::Types::n11::toString()) return n11; \
                    if (str == name_types::Types::n12::toString()) return n12; \
                    if (str == name_types::Types::n13::toString()) return n13; \
                    if (str == name_types::Types::n14::toString()) return n14; \
                    if (str == name_types::Types::n15::toString()) return n15; \
                    if (str == name_types::Types::n16::toString()) return n16; \
                    if (str == name_types::Types::n17::toString()) return n17; \
                    if (str == name_types::Types::n18::toString()) return n18; \
                    if (str == name_types::Types::n19::toString()) return n19; \
                    if (str == name_types::Types::n20::toString()) return n20; \
                    \
        return{};\
    }\
};
